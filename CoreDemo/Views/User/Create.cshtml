
@using CoreDemo.Models.UserViewModels
@model CreateUserViewModel
@inject CoreDemo.Data.ApplicationDbContext dbContext

<h3>Add A New User</h3>
        <form asp-controller="User" asp-action="Create" method="post" class="form-horizontal">
        <div class="form-group">
            <div asp-validation-summary="All" class="text-danger"></div>
            <label asp-for="UserName" class="control-label"></label>
            <input asp-for="UserName" class="form-control" />
            <span asp-validation-for="UserName" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="NewPassword" class="control-label"></label>
            <input asp-for="NewPassword" class="form-control" />
            <span asp-validation-for="NewPassword" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="ConfirmPassword" class="control-label"></label>
            <input asp-for="ConfirmPassword" class="form-control" />
            <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="UserRole" class="control-label"></label>
            <select asp-for="UserRole" asp-items="@dbContext.Roles.OrderBy(x => x.Name).Select(i => new SelectListItem() {Text = i.Name, Value = i.Name});"></select>
            <span asp-validation-for="UserRole" class="text-danger"></span>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Create</button>
            <a class="btn btn-default" asp-controller="User" asp-action="Index">Cancel</a>
        </div>
        </form>

    @section Scripts {
        @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    }
